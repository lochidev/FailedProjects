@page "/profile"
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
<h3 class="text-3xl font-bold text-center pb-4">Your profile</h3>
<UserstatsComponent UserStats="userStats" Initializing="isInitializing" Error="@userStatsError"></UserstatsComponent>
@if (newNotificationMessage is not null && newNotificationState)
{
    @if (deletionSuccess)
    {
        <div class="bg-green-100 mb-2 border border-green-400 text-green-700 px-4 py-3 rounded relative" role="alert">
            <strong class="font-bold">Yay!</strong>
            <span class="block sm:inline">@newNotificationMessage</span>
            <span class="absolute top-0 bottom-0 right-0 px-4 py-3">
                <svg @onclick="ResetNotificationState" class="fill-current h-6 w-6 text-green-500" role="button" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><title>Close</title><path d="M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z" /></svg>
            </span>
        </div>
    }
    else
    {
        <div class="bg-red-100 mb-2 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
            <strong class="font-bold">Oh no!</strong>
            <span class="block sm:inline">@newNotificationMessage</span>
            <span class="absolute top-0 bottom-0 right-0 px-4 py-3">
                <svg @onclick="ResetNotificationState" class="fill-current h-6 w-6 text-red-500" role="button" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><title>Close</title><path d="M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z" /></svg>
            </span>
        </div>
    }
}
<div class="@AnimationCss">
    @if (isInitializing)
    {
        <h2 class="text-2xl font-bold text-center p-2 py-72">Loading...</h2>
    }
    else if (error is not null)
    {
        <h2 class="text-2xl font-bold text-center p-2 py-72">@error</h2>
    }
    else if (posts.Count == 0)
    {
        <h2 class="text-2xl font-bold text-center p-2 py-72">We are sorry but we found nothing. If you made a post just now, it'll take around 5 minutes to show up here :(</h2>
    }
    else
    {
        <div class="grid 2xl:grid-cols-3 gap-4">

            @foreach (var post in posts)
            {
                <PostComponent ShowOptions="ShowOptions(post)" OnError="OnErrorHandler" OnSuccess="OnSuccessHandler" Post="post"
                       RewardClaimed="true"></PostComponent>
            }
        </div>
    }
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState;
    private string error;
    private bool isInitializing = true;
    private string AnimationCss => isInitializing ? "animate-pulse" : null;
    private HashSet<Post> posts = new();
    private string newNotificationMessage;
    private bool newNotificationState = false;
    private bool deletionSuccess = false;
    private UserStats userStats;
    private string userStatsError;
    protected override async Task OnInitializedAsync()
    {
        authState = await authenticationStateTask;
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");
        }
        try
        {
            var client = ClientFactory.CreateClient("Public");
            posts = await client.GetFromJsonAsync<HashSet<Post>>($"api/posts/getuserposts?userid={user.Identity.Name}");
        }
        catch (Exception)
        {
            error = "Something went wrong! Server might've gone kaboom! Please try again later!";
        }
        try
        {
            var client = ClientFactory.CreateClient("WebAPI");
            userStats = await client.GetFromJsonAsync<UserStats>($"api/account/userstats");
        }
        catch (Exception)
        {
            userStatsError = "Failed to fetch your user stats :(";
        }
        isInitializing = false;
    }
    private void OnErrorHandler(string errorMsg)
    {
        newNotificationMessage = errorMsg;
        newNotificationState = true;
    }
    private void OnSuccessHandler(string msg)
    {
        newNotificationMessage = msg;
        newNotificationState = true;
        deletionSuccess = true;
    }
    private void ResetNotificationState()
    {
        newNotificationState = false;
        deletionSuccess = false;
    }
    private bool ShowOptions(Post post)
    {
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            return (user.Identity.Name.ToLower() == post.OwnerUserId.ToLower());
        }
        else
        {
            return false;
        }
    }
}

